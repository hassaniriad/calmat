//
// This is an example of file containing user functions that can be added to the 
// pk2 librairie by using addfun (see the help of addfun using -h)
//
// The syntax for declaring a function follows that of Scilab, except for the use
// of the keywords "fortranproc" and "endfortranproc" in place of "function" and
// "endfunction": the output arguments are specified between square brackets (not
// (needed if only one ouput argument) and the input arguments are between 
// parentheses after the name of the function:  
//         fortranproc [ out1, out2, ...  ] = funcName ( in1, in2, in3, ...)
//
// The body of the function is given in very basic Fortran langage as illustrated
// by the following examples.
//
// Accepted types (don't worry about their kind) for input/output arguments
//    . integer, 
//    . real, 
//    . complexe, 
//    . logical,
//    . type(str_t) (see module str_m).
//
// The type(str_t) is used for string (don't use "character" except for local 
// variables)
//



fortranproc r = f(x,y)
   real :: x, y, r
   r = x**2 + y**2
endfortranproc

fortranproc y = g(x)
   real :: x, y
   y = sin(x) - 1
endfortranproc

fortranproc y = h(x)
   real :: x, y
   y = x**2 + 2*x + 1
endfortranproc

